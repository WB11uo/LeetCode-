// Prim算法

class Solution {
    public int minCostConnectPoints(int[][] points) {
        int n=points.length;
        int[] dist=new int[n];
        Arrays.fill(dist, Integer.MAX_VALUE);
        boolean[] added=new boolean[n];
        int ans=0;
        for(int i=0; i<n; i++){
            int min=0;
            for(int j=0; j<n; j++){
                if(!added[j]&&dist[j]<dist[min]){
                    min=j;
                }
            }
            added[min]=true;
            if(dist[min]!=Integer.MAX_VALUE) ans+=dist[min];
            for(int j=0; j<n; j++){
                if(!added[j]){
                    dist[j]=Math.min(dist[j], mdist(points[min], points[j]));
                }
            }
        }
        return ans;
    }
    int mdist(int[] x, int[] y){
        return Math.abs(x[0]-y[0])+Math.abs(x[1]-y[1]);
    }
}
////////////////////////////////////////////////////
// Kruskal算法
class Solution {
    public int minCostConnectPoints(int[][] points) {
        PriorityQueue<int[]> pq=new PriorityQueue<>((o1,o2)->o1[2]-o2[2]);
        for(int i=0; i<points.length; i++){
            for(int j=0; j<points.length; j++){
                if(i==j) continue;
                pq.add(new int[]{i,j,Math.abs(points[i][0]-points[j][0])+Math.abs(points[i][1]-points[j][1])});
            }
        }
        int ans=0; int n=points.length;
        parent=new int[n];
        for(int i=0; i<n; i++) parent[i]=i;
        int i=0; 
        while(i!=n-1){
            int[] tmp=pq.poll();
            int jj = root(tmp[0]);  
            int kk = root(tmp[1]);  
            if(jj != kk){  
                ++i;   
                ans+=tmp[2];
                union(jj,kk);  
            }  
        }
        return ans;
    }
    int[] parent;
    int root(int p){
        while(p!=parent[p]){
            p=parent[p];
            parent[p]=parent[parent[p]];
        }
        return p;
    }
    void union(int i, int j){
        parent[root(i)]=root(j);
    }
}
